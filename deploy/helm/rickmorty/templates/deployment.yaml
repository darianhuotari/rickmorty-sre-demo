apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "rickmorty.fullname" . }}
  labels:
    {{- include "rickmorty.labels" . | nindent 4 }}
spec:
  {{- if not .Values.hpa.enabled }}
  replicas: {{ default 1 .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0 # always keep all old pods running until new ones are ready
      maxSurge: 50%  # allow extra pods during rollout
      minReadySeconds: 10 # wait before marking pod available
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        {{- include "rickmorty.labels" . | nindent 8 }}
      annotations:
        # roll pods when ConfigMap/Secret changes
        checksum/fluentbit: {{ include (print $.Template.BasePath "/configmap-fluentbit.yaml") . | sha256sum }}
    spec:
      terminationGracePeriodSeconds: 60 # allow time for graceful shutdown
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: app-logs
          emptyDir: {}
        {{- if .Values.fluentbit.enabled }}
        - name: fluentbit-config
          configMap:
            name: {{ include "rickmorty.fullname" . }}-fluentbit
        {{- end }}
      containers:
        - name: app
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.containerSecurityContext | nindent 12 }}
          ports:
            - name: http
              containerPort: 8000
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 20"]  # allow endpoint removal from LB before SIGTERM
          env:
            # --- DB wait / startup backoff ---
            {{- with .Values.env.DB_WAIT_MAX_ATTEMPTS }}
            - name: DB_WAIT_MAX_ATTEMPTS
              value: "{{ . }}"
            {{- end }}
            {{- with .Values.env.DB_WAIT_BACKOFF_START }}
            - name: DB_WAIT_BACKOFF_START
              value: "{{ . }}"
            {{- end }}
            {{- with .Values.env.DB_WAIT_BACKOFF_MAX }}
            - name: DB_WAIT_BACKOFF_MAX
              value: "{{ . }}"
            {{- end }}

            # --- SQLAlchemy pool tuning ---
            {{- with .Values.env.DB_POOL_SIZE }}
            - name: DB_POOL_SIZE
              value: "{{ . }}"
            {{- end }}
            {{- with .Values.env.DB_MAX_OVERFLOW }}
            - name: DB_MAX_OVERFLOW
              value: "{{ . }}"
            {{- end }}
            {{- with .Values.env.DB_POOL_RECYCLE }}
            - name: DB_POOL_RECYCLE
              value: "{{ . }}"
            {{- end }}
            - name: PORT
              value: "8000"
            - name: CACHE_TTL
              value: {{ .Values.env.CACHE_TTL | quote }}
            - name: MAX_RETRIES
              value: {{ .Values.env.MAX_RETRIES | quote }}
            - name: REQUEST_TIMEOUT
              value: {{ .Values.env.REQUEST_TIMEOUT | quote }}
            - name: REFRESH_WORKER_ENABLED
              value: {{ .Values.env.REFRESH_WORKER_ENABLED | quote }}
            - name: REFRESH_INTERVAL
              value: {{ .Values.env.REFRESH_INTERVAL | quote }}
            - name: LOG_FILE_PATH
              value: {{ .Values.env.LOG_FILE_PATH | quote }}

            # DATABASE_URL: existingSecret -> -db -> -conn (when postgresql.enabled)
            {{- if or .Values.database.existingSecret .Values.database.createSecret .Values.postgresql.enabled }}
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: "{{- if .Values.database.existingSecret -}}{{ .Values.database.existingSecret }}{{- else if .Values.database.createSecret -}}{{ include "rickmorty.fullname" . }}-db{{- else -}}{{ include "rickmorty.fullname" . }}-conn{{- end -}}"
                  key: {{ .Values.database.key }}
            {{- end }}

          volumeMounts:
            - name: app-logs
              mountPath: /var/log/app
          readinessProbe:
            httpGet:
              path: /healthcheck
              port: http
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 2
          # livenessProbe should be looser than readinessProbe so we stop traffic before 
          # restarting the container. 
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 4
          startupProbe:
            httpGet:
              path: /healthcheck
              port: http
            periodSeconds: 10
            timeoutSeconds: 3
            failureThreshold: 12 # ~2 minutes max startup time
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
        {{- if .Values.fluentbit.enabled }}
        - name: fluent-bit
          image: {{ .Values.fluentbit.image }}
          imagePullPolicy: IfNotPresent
          resources:
            {{- toYaml .Values.fluentbit.resources | nindent 12 }}
          volumeMounts:
            - name: app-logs
              mountPath: /var/log/app
            - name: fluentbit-config
              mountPath: /fluent-bit/etc/
          args: ["-c", "/fluent-bit/etc/fluent-bit.conf"]
        {{- end }}
